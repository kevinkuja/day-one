import { Deployer } from '@matterlabs/hardhat-zksync';
import { ContractType, ContractInfo, saveContractToAddressBook } from './lensUtils';
import { deployContract, getWallet, LOCAL_RICH_WALLETS } from './utils';
import { ethers } from 'ethers';
import * as hre from 'hardhat';

async function deploy() {
  const DEPLOYING_FR = Boolean(process.env.DEPLOY_FR);

  const regularDeployerPk = process.env.WALLET_PRIVATE_KEY;
  if (!regularDeployerPk) {
    throw new Error('WALLET_PRIVATE_KEY not found in environment variables');
  }

  const __create2DeployerPk__ = process.env.LENS_CREATE2_DEPLOYER_PRIVATE_KEY;
  if (!__create2DeployerPk__) {
    throw new Error('LENS_CREATE2_DEPLOYER_PRIVATE_KEY not found in environment variables');
  }

  const create2ProxyAdminPk = process.env.PROXY_ADMIN_PRIVATE_KEY;
  if (!create2ProxyAdminPk) {
    throw new Error('PROXY_ADMIN_PRIVATE_KEY not found in environment variables');
  }

  const lensCreate2OwnerAddress = process.env.LENS_CREATE2_OWNER_ADDRESS;
  if (!lensCreate2OwnerAddress) {
    throw new Error('LENS_CREATE2_OWNER_ADDRESS not found in environment variables');
  }

  const regularDeployerWallet = getWallet(regularDeployerPk);
  const __create2DeployerWallet__ = getWallet(__create2DeployerPk__);
  const create2ProxyAdminWallet = getWallet(create2ProxyAdminPk);

  console.log(`Address of Regular deployer: ${await regularDeployerWallet.getAddress()}`);
  console.log(
    `Address of LensCreate2 deployer (!): ${await __create2DeployerWallet__.getAddress()}`
  );
  console.log(`Address of LensCreate2 owner: ${lensCreate2OwnerAddress}`);
  console.log(`Address of LensCreate2 proxy admin: ${await create2ProxyAdminWallet.getAddress()}`);

  if (!DEPLOYING_FR) {
    const richWallet = getWallet(LOCAL_RICH_WALLETS[0].privateKey);
    await richWallet.sendTransaction({
      to: __create2DeployerWallet__.address,
      value: ethers.parseEther('1.0'),
    });
  }

  const nonce = await __create2DeployerWallet__.getNonce();

  const lensCreate2Info: ContractInfo = {
    name: 'LensCreate2Impl',
    contractName: 'LensCreate2',
    contractType: ContractType.Aux,
    constructorArguments: [],
  };

  const __create2Deployer__ = new Deployer(hre, __create2DeployerWallet__);
  const proxyArtifact = await __create2Deployer__
    .loadArtifact('TransparentUpgradeableProxy')
    .catch((error) => {
      if (
        error?.message?.includes(`Artifact for contract "TransparentUpgradeableProxy" not found.`)
      ) {
        console.error(error.message);
        throw `⛔️ Please make sure you have compiled your contracts or specified the correct contract name!`;
      } else {
        throw error;
      }
    });

  const artifactBytecodeHash = bytecodeHash(proxyArtifact.bytecode);
  const cachedBytecodeHash = bytecodeHash(transparentUpgradeableProxyBytecode);

  console.log(`Artifact bytecodeHash: ${artifactBytecodeHash}`);
  console.log(`Cached bytehash: ${cachedBytecodeHash}`);

  if (artifactBytecodeHash != cachedBytecodeHash) {
    console.error(
      `Artifact TransparentUpgradeableProxy bytecode doesn't match the bytecode that was used to deploy LensCreate2.`
    );
    console.error(`Please check what changed since this commit was posted`);
    throw 'Bytecodes mismatch';
  }

  console.log(`LensCreate2 deployer nonce: ${nonce}`);
  if (nonce !== 0) {
    throw new Error('LensCreate2 deployer nonce is not 0 - ABORTING');
  }

  const emptyContractDeployed = await deployContract('EmptyImplementation', [], {
    wallet: regularDeployerWallet,
  });

  console.log(`Empty contract deployed at ${emptyContractDeployed.address}`);

  const lensCreate2ProxyDeployed = await deployContract(
    'TransparentUpgradeableProxy',
    [await emptyContractDeployed.getAddress(), await create2ProxyAdminWallet.getAddress(), '0x'],
    {
      wallet: __create2DeployerWallet__,
    }
  );

  const lensCreate2ImplementationDeployed = await deployContract(
    lensCreate2Info.contractName,
    lensCreate2Info.constructorArguments,
    {
      wallet: regularDeployerWallet,
    }
  );

  lensCreate2Info.address = await lensCreate2ProxyDeployed.getAddress();

  const lensCreate2Owner = await regularDeployerWallet.getAddress();

  console.log(`LensCreate2 Owner = ${lensCreate2Owner}`);

  const initializerABI = ['function initialize(address owner) external'];
  const initializerInterface = new ethers.Interface(initializerABI);
  const initializeEncodedCall = initializerInterface.encodeFunctionData('initialize', [
    lensCreate2Owner,
  ]);

  console.log('Initialize encoded call = ', initializeEncodedCall);

  const transparentUpgradeableProxyArtifact = await hre.artifacts.readArtifact(
    'ITransparentUpgradeableProxy'
  );
  const transparentUpgradeableProxy = new ethers.Contract(
    lensCreate2Info.address,
    transparentUpgradeableProxyArtifact.abi,
    create2ProxyAdminWallet
  );

  console.log('About to upgradeAndCall...');

  const upgradeTx = await transparentUpgradeableProxy.upgradeToAndCall(
    await lensCreate2ImplementationDeployed.getAddress(),
    initializeEncodedCall
  );

  console.log('Upgrade tx sent:', upgradeTx.hash);

  await upgradeTx.wait();

  console.log('Upgrade tx mined');

  const lensCreate2Artifact = await new Deployer(hre, regularDeployerWallet)
    .loadArtifact('LensCreate2')
    .catch((error) => {
      if (error?.message?.includes(`Artifact for contract "LensCreate2" not found.`)) {
        console.error(error.message);
        throw `⛔️ Please make sure you have compiled your contracts or specified the correct contract name!`;
      } else {
        throw error;
      }
    });

  const lensCreate2 = new hre.ethers.Contract(
    lensCreate2Info.address,
    lensCreate2Artifact.abi,
    regularDeployerWallet
  );
  const actualProxyBytecodeHash = await lensCreate2.PROXY_BYTECODE_HASH();

  console.log(`Actual Proxy Bytecode Hash: ${actualProxyBytecodeHash}`);

  if (actualProxyBytecodeHash != '0x' + cachedBytecodeHash) {
    console.error(`Actual Proxy Bytecode Hash doesn't match the cached bytecode hash`);
    console.error(`Please check what changed since this commit was posted`);
    throw 'Proxy bytecode hash mismatch';
  }

  const predictedAddress = await lensCreate2['getAddress(bytes32)'].staticCall(
    '0x0000000000000000000000000000000000000000000000000000000000000000'
  );

  console.log(`Predicted Address at salt 0: ${predictedAddress}`);
  console.log(`Assumed Address at salt 0: ${assumedAddress}`);

  if (predictedAddress != assumedAddress) {
    console.error(`Predicted address at salt 0 doesn't match the assumed address`);
    console.error(`Please check what changed since this commit was posted`);
    throw 'Predicted addresses mismatch';
  }

  const expectedCreate2Address = '0x52AF9CF29976C310E3DE03C509E108edB6edb8c0';
  console.log(`LensCreate2 is expected to be deloyed at ${expectedCreate2Address}`);
  console.log(`${lensCreate2Info.contractName} deployed at ${lensCreate2Info.address}`);

  if (lensCreate2Info.address != expectedCreate2Address) {
    console.error(`Predicted address for LensCreate2 doesn't match the expected address`);
    console.error(`Please check what changed since this commit was posted`);
    throw 'Predicted addresses mismatch';
  }

  saveContractToAddressBook(lensCreate2Info);
}

if (require.main === module) {
  deploy()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

export default deploy;

function bytecodeHash(bytecode: string): string {
  // Remove '0x' prefix if present
  const cleanBytecode = bytecode.startsWith('0x') ? bytecode.slice(2) : bytecode;

  // Convert hex string to byte array
  const byteArray = Buffer.from(cleanBytecode, 'hex');

  // Calculate SHA256 hash
  const hash = Buffer.from(require('crypto').createHash('sha256').update(byteArray).digest());

  // Modify first 4 bytes according to spec
  hash[0] = 1;
  hash[1] = 0;

  // Set bytes 2-3 to length/32 as uint16
  const lenBytes = Buffer.alloc(2);
  lenBytes.writeUInt16BE(byteArray.length / 32);
  hash[2] = lenBytes[0];
  hash[3] = lenBytes[1];

  return hash.toString('hex');
}

// Assumed address at salt 0:
const assumedAddress = '0xff82e744035Bb7C86044F67314772Cbf87A8bBf2';

// Assumed bytecode to compare with:
const transparentUpgradeableProxyBytecode =
  '';
